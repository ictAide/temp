# Generated by Django 5.1.5 on 2025-01-18 11:49

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_stucourse.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app_stucourse.student')),
            ],
        ),
    ]

#මේ විධියට දාලා Student සහ Course ටේබල් දෙක සීඩ් කරගමි

def seed_data(apps, schema_editor):
    # Get the models dynamically to ensure compatibility with migrations
    Student = apps.get_model('app_stucourse', 'Student')
    Course = apps.get_model('app_stucourse', 'Course')

    # Seed Student Table
    students = [
        {"name": "Alice", "email": "alice@example.com"},
        {"name": "Bob", "email": "bob@example.com"},
        {"name": "Charlie", "email": "charlie@example.com"}
    ]

    for student in students:
        Student.objects.get_or_create(name=student["name"], email=student["email"])

    # Seed Course Table
    courses = [
        {"title": "Mathematics"},
        {"title": "Science"},
        {"title": "History"}
    ]

    for course in courses:
        Course.objects.get_or_create(title=course["title"])